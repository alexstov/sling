// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/alexstov/sling/emul (interfaces: Dispatcher)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"
	sync "sync"

	emul "github.com/alexstov/sling/emul"
	gomock "github.com/golang/mock/gomock"
	go_metrics "github.com/rcrowley/go-metrics"
)

// MockDispatcher is a mock of Dispatcher interface
type MockDispatcher struct {
	ctrl     *gomock.Controller
	recorder *MockDispatcherMockRecorder
}

// MockDispatcherMockRecorder is the mock recorder for MockDispatcher
type MockDispatcherMockRecorder struct {
	mock *MockDispatcher
}

// NewMockDispatcher creates a new mock instance
func NewMockDispatcher(ctrl *gomock.Controller) *MockDispatcher {
	mock := &MockDispatcher{ctrl: ctrl}
	mock.recorder = &MockDispatcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDispatcher) EXPECT() *MockDispatcherMockRecorder {
	return m.recorder
}

// GetHisto mocks base method
func (m *MockDispatcher) GetHisto() (go_metrics.Histogram, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHisto")
	ret0, _ := ret[0].(go_metrics.Histogram)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHisto indicates an expected call of GetHisto
func (mr *MockDispatcherMockRecorder) GetHisto() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHisto", reflect.TypeOf((*MockDispatcher)(nil).GetHisto))
}

// MultiSend mocks base method
func (m *MockDispatcher) MultiSend(arg0 context.Context, arg1 <-chan interface{}, arg2 *emul.SendArgs, arg3 *sync.WaitGroup) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MultiSend", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// MultiSend indicates an expected call of MultiSend
func (mr *MockDispatcherMockRecorder) MultiSend(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MultiSend", reflect.TypeOf((*MockDispatcher)(nil).MultiSend), arg0, arg1, arg2, arg3)
}

// SendReq mocks base method
func (m *MockDispatcher) SendReq(arg0 context.Context, arg1 string, arg2 *emul.SendArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendReq", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendReq indicates an expected call of SendReq
func (mr *MockDispatcherMockRecorder) SendReq(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendReq", reflect.TypeOf((*MockDispatcher)(nil).SendReq), arg0, arg1, arg2)
}
