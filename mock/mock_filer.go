// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/4alexey/sling/sio (interfaces: Filer)

// Package mock is a generated GoMock package.
package mock

import (
	sio "github.com/4alexey/sling/sio"
	gomock "github.com/golang/mock/gomock"
	os "os"
	reflect "reflect"
)

// MockFiler is a mock of Filer interface
type MockFiler struct {
	ctrl     *gomock.Controller
	recorder *MockFilerMockRecorder
}

// MockFilerMockRecorder is the mock recorder for MockFiler
type MockFilerMockRecorder struct {
	mock *MockFiler
}

// NewMockFiler creates a new mock instance
func NewMockFiler(ctrl *gomock.Controller) *MockFiler {
	mock := &MockFiler{ctrl: ctrl}
	mock.recorder = &MockFilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFiler) EXPECT() *MockFilerMockRecorder {
	return m.recorder
}

// BuildFilePath mocks base method
func (m *MockFiler) BuildFilePath(arg0, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildFilePath", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BuildFilePath indicates an expected call of BuildFilePath
func (mr *MockFilerMockRecorder) BuildFilePath(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildFilePath", reflect.TypeOf((*MockFiler)(nil).BuildFilePath), arg0, arg1)
}

// CleanDir mocks base method
func (m *MockFiler) CleanDir(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CleanDir", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CleanDir indicates an expected call of CleanDir
func (mr *MockFilerMockRecorder) CleanDir(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CleanDir", reflect.TypeOf((*MockFiler)(nil).CleanDir), arg0)
}

// CloseFile mocks base method
func (m *MockFiler) CloseFile(arg0 *os.File) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseFile", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseFile indicates an expected call of CloseFile
func (mr *MockFilerMockRecorder) CloseFile(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseFile", reflect.TypeOf((*MockFiler)(nil).CloseFile), arg0)
}

// CreateFile mocks base method
func (m *MockFiler) CreateFile(arg0 string) (*os.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFile", arg0)
	ret0, _ := ret[0].(*os.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFile indicates an expected call of CreateFile
func (mr *MockFilerMockRecorder) CreateFile(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFile", reflect.TypeOf((*MockFiler)(nil).CreateFile), arg0)
}

// DetermineContentType mocks base method
func (m *MockFiler) DetermineContentType(arg0 string) (sio.ContentType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DetermineContentType", arg0)
	ret0, _ := ret[0].(sio.ContentType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DetermineContentType indicates an expected call of DetermineContentType
func (mr *MockFilerMockRecorder) DetermineContentType(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetermineContentType", reflect.TypeOf((*MockFiler)(nil).DetermineContentType), arg0)
}

// Mkdir mocks base method
func (m *MockFiler) Mkdir(arg0 string, arg1 os.FileMode) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Mkdir", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Mkdir indicates an expected call of Mkdir
func (mr *MockFilerMockRecorder) Mkdir(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Mkdir", reflect.TypeOf((*MockFiler)(nil).Mkdir), arg0, arg1)
}

// MkdirAll mocks base method
func (m *MockFiler) MkdirAll(arg0 string, arg1 os.FileMode) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MkdirAll", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// MkdirAll indicates an expected call of MkdirAll
func (mr *MockFilerMockRecorder) MkdirAll(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MkdirAll", reflect.TypeOf((*MockFiler)(nil).MkdirAll), arg0, arg1)
}

// ReadArchive mocks base method
func (m *MockFiler) ReadArchive(arg0 string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadArchive", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadArchive indicates an expected call of ReadArchive
func (mr *MockFilerMockRecorder) ReadArchive(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadArchive", reflect.TypeOf((*MockFiler)(nil).ReadArchive), arg0)
}

// ReadFile mocks base method
func (m *MockFiler) ReadFile(arg0 string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadFile", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadFile indicates an expected call of ReadFile
func (mr *MockFilerMockRecorder) ReadFile(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadFile", reflect.TypeOf((*MockFiler)(nil).ReadFile), arg0)
}

// RemoveAll mocks base method
func (m *MockFiler) RemoveAll(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveAll", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveAll indicates an expected call of RemoveAll
func (mr *MockFilerMockRecorder) RemoveAll(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveAll", reflect.TypeOf((*MockFiler)(nil).RemoveAll), arg0)
}

// WriteFile mocks base method
func (m *MockFiler) WriteFile(arg0 *os.File, arg1 []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteFile", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WriteFile indicates an expected call of WriteFile
func (mr *MockFilerMockRecorder) WriteFile(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteFile", reflect.TypeOf((*MockFiler)(nil).WriteFile), arg0, arg1)
}
