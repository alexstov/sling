// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/rcrowley/go-metrics (interfaces: Histogram)

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	go_metrics "github.com/rcrowley/go-metrics"
	reflect "reflect"
)

// MockHistogram is a mock of Histogram interface
type MockHistogram struct {
	ctrl     *gomock.Controller
	recorder *MockHistogramMockRecorder
}

// MockHistogramMockRecorder is the mock recorder for MockHistogram
type MockHistogramMockRecorder struct {
	mock *MockHistogram
}

// NewMockHistogram creates a new mock instance
func NewMockHistogram(ctrl *gomock.Controller) *MockHistogram {
	mock := &MockHistogram{ctrl: ctrl}
	mock.recorder = &MockHistogramMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockHistogram) EXPECT() *MockHistogramMockRecorder {
	return m.recorder
}

// Clear mocks base method
func (m *MockHistogram) Clear() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Clear")
}

// Clear indicates an expected call of Clear
func (mr *MockHistogramMockRecorder) Clear() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clear", reflect.TypeOf((*MockHistogram)(nil).Clear))
}

// Count mocks base method
func (m *MockHistogram) Count() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count")
	ret0, _ := ret[0].(int64)
	return ret0
}

// Count indicates an expected call of Count
func (mr *MockHistogramMockRecorder) Count() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockHistogram)(nil).Count))
}

// Max mocks base method
func (m *MockHistogram) Max() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Max")
	ret0, _ := ret[0].(int64)
	return ret0
}

// Max indicates an expected call of Max
func (mr *MockHistogramMockRecorder) Max() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Max", reflect.TypeOf((*MockHistogram)(nil).Max))
}

// Mean mocks base method
func (m *MockHistogram) Mean() float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Mean")
	ret0, _ := ret[0].(float64)
	return ret0
}

// Mean indicates an expected call of Mean
func (mr *MockHistogramMockRecorder) Mean() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Mean", reflect.TypeOf((*MockHistogram)(nil).Mean))
}

// Min mocks base method
func (m *MockHistogram) Min() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Min")
	ret0, _ := ret[0].(int64)
	return ret0
}

// Min indicates an expected call of Min
func (mr *MockHistogramMockRecorder) Min() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Min", reflect.TypeOf((*MockHistogram)(nil).Min))
}

// Percentile mocks base method
func (m *MockHistogram) Percentile(arg0 float64) float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Percentile", arg0)
	ret0, _ := ret[0].(float64)
	return ret0
}

// Percentile indicates an expected call of Percentile
func (mr *MockHistogramMockRecorder) Percentile(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Percentile", reflect.TypeOf((*MockHistogram)(nil).Percentile), arg0)
}

// Percentiles mocks base method
func (m *MockHistogram) Percentiles(arg0 []float64) []float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Percentiles", arg0)
	ret0, _ := ret[0].([]float64)
	return ret0
}

// Percentiles indicates an expected call of Percentiles
func (mr *MockHistogramMockRecorder) Percentiles(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Percentiles", reflect.TypeOf((*MockHistogram)(nil).Percentiles), arg0)
}

// Sample mocks base method
func (m *MockHistogram) Sample() go_metrics.Sample {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sample")
	ret0, _ := ret[0].(go_metrics.Sample)
	return ret0
}

// Sample indicates an expected call of Sample
func (mr *MockHistogramMockRecorder) Sample() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sample", reflect.TypeOf((*MockHistogram)(nil).Sample))
}

// Snapshot mocks base method
func (m *MockHistogram) Snapshot() go_metrics.Histogram {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Snapshot")
	ret0, _ := ret[0].(go_metrics.Histogram)
	return ret0
}

// Snapshot indicates an expected call of Snapshot
func (mr *MockHistogramMockRecorder) Snapshot() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Snapshot", reflect.TypeOf((*MockHistogram)(nil).Snapshot))
}

// StdDev mocks base method
func (m *MockHistogram) StdDev() float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StdDev")
	ret0, _ := ret[0].(float64)
	return ret0
}

// StdDev indicates an expected call of StdDev
func (mr *MockHistogramMockRecorder) StdDev() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StdDev", reflect.TypeOf((*MockHistogram)(nil).StdDev))
}

// Sum mocks base method
func (m *MockHistogram) Sum() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sum")
	ret0, _ := ret[0].(int64)
	return ret0
}

// Sum indicates an expected call of Sum
func (mr *MockHistogramMockRecorder) Sum() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sum", reflect.TypeOf((*MockHistogram)(nil).Sum))
}

// Update mocks base method
func (m *MockHistogram) Update(arg0 int64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Update", arg0)
}

// Update indicates an expected call of Update
func (mr *MockHistogramMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockHistogram)(nil).Update), arg0)
}

// Variance mocks base method
func (m *MockHistogram) Variance() float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Variance")
	ret0, _ := ret[0].(float64)
	return ret0
}

// Variance indicates an expected call of Variance
func (mr *MockHistogramMockRecorder) Variance() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Variance", reflect.TypeOf((*MockHistogram)(nil).Variance))
}
